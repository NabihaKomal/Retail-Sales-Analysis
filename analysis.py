# -*- coding: utf-8 -*-
"""sales_data_analysis_using_pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRk27wYOqSCXWsEGtI20ISS4MJCZfVhg

# Retail Sales Data Analysis


---

## Install Dependencies:
"""

# Import the following libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set seaborn style for better visuals
sns.set(style="whitegrid")

from google.colab import drive
drive.mount('/content/drive')

# Load the CSV from Google Drive (adjust path as needed)
file_path = '/content/drive/MyDrive/Github Projects/retail_sales_dataset.csv'  # Update this if in a subfolder
df = pd.read_csv(file_path)
print("Dataset loaded successfully!")
print(df.head())  # Preview first 5 rows
print(df.info())  # Check data types and non-null counts

"""## Data Cleaning:


---


* Convert Date to datetime.

* Check for missing values and duplicates.

* Add a Month-Year column for time-based analysis.
"""

# Convert 'Date' to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Check for missing values
print("Missing values:\n", df.isnull().sum())

# Check for duplicates
print("Duplicate rows:", df.duplicated().sum())

# If there are duplicates, drop them (uncomment if needed)
# df = df.drop_duplicates()

# Basic stats
print("Descriptive statistics:\n", df.describe())

# Add a new column for Month-Year for time-based analysis
df['Month-Year'] = df['Date'].dt.to_period('M')

"""## Bar plot: Total sales by product category."""

plt.figure(figsize=(10, 6))
sns.barplot(x='Product Category', y='Total Amount', data=df, estimator=sum, ci=None)
plt.title('Total Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Sales Amount')
plt.xticks(rotation=45)
plt.show()

"""## Box plot: Sales distribution by gender.

"""

plt.figure(figsize=(8, 5))
sns.boxplot(x='Gender', y='Total Amount', data=df)
plt.title('Sales Distribution by Gender')
plt.xlabel('Gender')
plt.ylabel('Total Amount per Transaction')
plt.show()

"""## Line plot: Total sales over time (monthly).

"""

monthly_sales = df.groupby('Month-Year')['Total Amount'].sum().reset_index()
monthly_sales['Month-Year'] = monthly_sales['Month-Year'].astype(str)  # For plotting

plt.figure(figsize=(12, 6))
sns.lineplot(x='Month-Year', y='Total Amount', data=monthly_sales, marker='o')
plt.title('Total Sales Over Time (Monthly)')
plt.xlabel('Month-Year')
plt.ylabel('Total Sales Amount')
plt.xticks(rotation=45)
plt.show()

"""## Histogram: Customer age distribution.

"""

# Cell 6: Visualization 3 - Age Distribution of Customers
plt.figure(figsize=(10, 6))
sns.histplot(df['Age'], bins=20, kde=True)
plt.title('Age Distribution of Customers')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""## Heatmap: Correlation between numerical features."""

numerical_df = df[['Age', 'Quantity', 'Price per Unit', 'Total Amount']]
corr = numerical_df.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""## Insights:


---

* Top-selling product category.

* Average spend by gender.

* Most common customer age.

* Total overall sales.

* Peak sales month.
"""

# Insight 1: Top-selling product category
top_category = df.groupby('Product Category')['Total Amount'].sum().idxmax()
total_in_top = df.groupby('Product Category')['Total Amount'].sum().max()
print(f"Top-selling category: {top_category} with total sales of ${total_in_top:.2f}")

# Insight 2: Average spend by gender
avg_spend_gender = df.groupby('Gender')['Total Amount'].mean()
print("Average spend by gender:\n", avg_spend_gender)

# Insight 3: Most common age group
common_age = df['Age'].mode()[0]
print(f"Most common customer age: {common_age}")

# Insight 4: Total overall sales
total_sales = df['Total Amount'].sum()
print(f"Overall total sales: ${total_sales:.2f}")

# Insight 5: Peak sales month
peak_month = monthly_sales.loc[monthly_sales['Total Amount'].idxmax(), 'Month-Year']
print(f"Peak sales month: {peak_month}")